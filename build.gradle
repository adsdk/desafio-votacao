plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.diffplug.spotless' version '6.12.0'

}

group = 'com.br'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2022.0.0-RC2")
	set('springDocVersion', "2.0.2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.cloud:spring-cloud-starter'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.projectreactor.kafka:reactor-kafka'
	implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

spotless {
	format 'misc', {
		target '**/*.md', '**/.gitignore', '**/*.yml', '**/*.yaml', '**/*.json'
		targetExclude 'build/**'
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		importOrder()
		removeUnusedImports()
		palantirJavaFormat()
		formatAnnotations()
	}
}

